{"version":3,"sources":["components/RoomList.jsx","components/Message.jsx","components/MessageList.jsx","components/SendMessageForm.jsx","components/NewRoomForm.jsx","containers/App.jsx","containers/config.js","registerServiceWorker.js","index.js"],"names":["RoomList","sortedRooms","this","props","rooms","sort","a","b","id","className","map","room","active","roomId","key","onClick","subscribeToRoom","name","Component","Message","message","text","sender","MessageList","node","ReactDOM","findDOMNode","shouldScrollToBottom","scrollTop","clientHeight","scrollHeight","messages","i","sendMessageForm","handleChange","e","setState","target","value","handleSubmit","preventDefault","sendMessage","state","onSubmit","disabled","onChange","type","placeholder","NewRoomForm","roomName","createRoom","required","App","getRooms","currentUser","getJoinableRooms","then","joinableRooms","joinedRooms","catch","error","console","log","hooks","onNewMessage","Chatkit","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","connect","SendMessageForm","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"kTAyBeA,E,iLAtBJ,IAAD,OACFC,EAAc,YAAIC,KAAKC,MAAMC,OAAOC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,GAAKD,EAAEC,MAClE,OACC,yBAAKC,UAAU,aACd,4BACC,sCACCR,EAAYS,KAAI,SAAAC,GAChB,IAAMC,EAAS,EAAKT,MAAMU,SAAWF,EAAKH,GAAK,UAAY,GAC3D,OACC,wBAAIM,IAAKH,EAAKH,GAAIC,UAAW,OAASG,GACrC,uBAAGG,QAAS,kBAAM,EAAKZ,MAAMa,gBAAgBL,EAAKH,MAAlD,KACIG,EAAKM,gB,GAZMC,aCURC,EAVC,SAAChB,GAAW,IAAD,EACAA,EAAMiB,QAAvBC,EADiB,EACjBA,KAAMC,EADW,EACXA,OACd,OACC,yBAAKb,UAAU,WACd,yBAAKA,UAAU,oBAAoBa,EAAOL,MAC1C,yBAAKR,UAAU,gBAAgBY,KC6BpBE,E,8LA9Bb,IAAMC,EAAOC,IAASC,YAAYxB,MAClCA,KAAKyB,qBACJH,EAAKI,UAAYJ,EAAKK,aAAe,KAAOL,EAAKM,e,2CAIlD,GAAI5B,KAAKyB,qBAAsB,CAC9B,IAAMH,EAAOC,IAASC,YAAYxB,MAClCsB,EAAKI,UAAYJ,EAAKM,gB,+BAKvB,OAAK5B,KAAKC,MAAMU,OAQf,yBAAKJ,UAAU,gBACbP,KAAKC,MAAM4B,SAASrB,KAAI,SAACU,EAASY,GAAV,OACxB,kBAAC,EAAD,CAASlB,IAAKkB,EAAGZ,QAASA,QAR3B,yBAAKX,UAAU,gBACd,yBAAKA,UAAU,aAAf,6B,GAlBqBS,aCmCXe,E,YApCd,aAAe,IAAD,8BACb,+CAMDC,aAAe,SAAAC,GACd,EAAKC,SAAS,CACbhB,QAASe,EAAEE,OAAOC,SATN,EAadC,aAAe,SAAAJ,GACdA,EAAEK,iBACF,EAAKrC,MAAMsC,YAAY,EAAKC,MAAMtB,SAClC,EAAKgB,SAAS,CACbhB,QAAS,MAfV,EAAKsB,MAAQ,CACZtB,QAAS,IAHG,E,sEAsBb,OACC,0BAAMX,UAAU,oBAAoBkC,SAAUzC,KAAKqC,cAClD,2BACCK,SAAU1C,KAAKC,MAAMyC,SACrBC,SAAU3C,KAAKgC,aACfY,KAAK,OACLR,MAAOpC,KAAKwC,MAAMtB,QAClB2B,YAAY,sC,GA9Ba7B,aCiCf8B,E,YA/Bd,aAAc,IAAD,8BACZ,+CAMDd,aAAe,SAACC,GACf,EAAKC,SAAS,CAACa,SAAUd,EAAEE,OAAOC,SARtB,EAWbC,aAAe,SAACJ,GACfA,EAAEK,iBACF,EAAKrC,MAAM+C,WAAW,EAAKR,MAAMO,UACjC,EAAKb,SAAS,CAACa,SAAS,MAZxB,EAAKP,MAAQ,CACZO,SAAU,IAHC,E,sEAkBZ,OACC,yBAAKxC,UAAU,iBACd,0BAAMkC,SAAUzC,KAAKqC,cACpB,2BAAOM,SAAU3C,KAAKgC,aAAcI,MAAOpC,KAAKwC,MAAMO,SAAUH,KAAK,OAAOC,YAAY,WAAWI,UAAQ,IAC3G,4BAAQ3C,GAAG,kBAAkBsC,KAAK,UAAlC,W,GAxBqB5B,aCmGXkC,G,kBA3Fd,aAAe,IAAD,8BACb,+CAwBDC,SAAW,WACV,EAAKC,YACHC,mBACAC,MAAK,SAAAC,GAAa,OAClB,EAAKrB,SAAS,CACbqB,gBACAC,YAAa,EAAKJ,YAAYlD,WAG/BuD,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,+BAAgCF,OAlChD,EAoCd5C,gBAAkB,SAAAH,GACjB,EAAKuB,SAAS,CAAEL,SAAU,KAC1B,EAAKuB,YACHtC,gBAAgB,CAChBH,SACAkD,MAAO,CACNC,aAAc,SAAA5C,GACb,EAAKgB,SAAS,CAAEL,SAAS,GAAD,mBAAM,EAAKW,MAAMX,UAAjB,CAA2BX,UAIrDoC,MAAK,SAAA7C,GACL,EAAKyB,SAAS,CAAEvB,OAAQF,EAAKH,KAC7B,EAAK6C,cAELM,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,sBAAuBF,OAnDvC,EAqDdnB,YAAc,SAAApB,GACb,EAAKiC,YAAYb,YAAY,CAC5BpB,OACAR,OAAQ,EAAK6B,MAAM7B,UAxDP,EA4DdqC,WAAa,SAAAjC,GACZ,EAAKqC,YACHJ,WAAW,CACXjC,SAEAuC,MAAK,SAAA7C,GAAI,OAAI,EAAKK,gBAAgBL,EAAKH,OACvCmD,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,4BAA6BF,OAhE1D,EAAKlB,MAAQ,CACZX,SAAU,GACV0B,cAAe,GACfC,YAAa,GACb7C,OAAQ,MANI,E,iFAUO,IAAD,OACC,IAAIoD,IAAQC,YAAY,CAC3CC,gBCrBqB,8CDsBrBC,OAAQ,UACRC,cAAe,IAAIJ,IAAQK,cAAc,CAAEC,ICxB7B,kHD2BbC,UACAhB,MAAK,SAAAF,GACL,EAAKA,YAAcA,EACnB,EAAKD,cAELM,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,+BAAgCF,Q,+BAgD7D,OACC,yBAAKnD,UAAU,OACd,kBAAC,EAAD,CACCI,OAAQX,KAAKwC,MAAM7B,OACnBT,MAAK,sBAAMF,KAAKwC,MAAMe,eAAjB,YAAmCvD,KAAKwC,MAAMgB,cACnD1C,gBAAiBd,KAAKc,kBAEvB,kBAAC,EAAD,CACCe,SAAU7B,KAAKwC,MAAMX,SACrBlB,OAAQX,KAAKwC,MAAM7B,SAEpB,kBAAC4D,EAAD,CACChC,YAAavC,KAAKuC,YAClBG,UAAW1C,KAAKwC,MAAM7B,SAEvB,kBAAC,EAAD,CAAaqC,WAAYhD,KAAKgD,kB,GAtFhBhC,cECZwD,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTzB,MAAK,SAAA6B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7C,QACfwC,UAAUC,cAAcO,WAK1B7B,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBH,OAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,MCzEjEnC,IAASkE,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBX,UAAW,CAGzE,GADkB,IAAIY,IAAIC,IAAwBnB,OAAOC,UAC3CmB,SAAWpB,OAAOC,SAASmB,OAIvC,OAGFpB,OAAOqB,iBAAiB,QAAQ,WAC9B,IAAMhB,EAAK,UAAMc,IAAN,sBAEPrB,IAiDV,SAAiCO,GAE/BiB,MAAMjB,GACHzB,MAAK,SAAA2C,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CrB,UAAUC,cAAcqB,MAAMhD,MAAK,SAAA6B,GACjCA,EAAaoB,aAAajD,MAAK,WAC7BoB,OAAOC,SAAS6B,eAKpB1B,EAAgBC,MAGnBtB,OAAM,WACLE,QAAQC,IACN,oEArEA6C,CAAwB1B,GAIxBC,UAAUC,cAAcqB,MAAMhD,MAAK,WACjCK,QAAQC,IACN,gHAMJkB,EAAgBC,OCzCxB2B,K","file":"static/js/main.9fcff538.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass RoomList extends Component {\r\n\trender() {\r\n\t\tconst sortedRooms = [...this.props.rooms].sort((a, b) => a.id - b.id);\r\n\t\treturn (\r\n\t\t\t<div className=\"room-list\">\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<h3>Rooms:</h3>\r\n\t\t\t\t\t{sortedRooms.map(room => {\r\n\t\t\t\t\t\tconst active = this.props.roomId === room.id ? \" active\" : \"\";\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<li key={room.id} className={\"room\" + active}>\r\n\t\t\t\t\t\t\t\t<a onClick={() => this.props.subscribeToRoom(room.id)}>\r\n\t\t\t\t\t\t\t\t\t# {room.name}\r\n\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default RoomList;\r\n","import React from \"react\";\r\n\r\nconst Message = (props) => {\r\n\t\tconst { text, sender } = props.message;\r\n\t\treturn (\r\n\t\t\t<div className=\"message\">\r\n\t\t\t\t<div className=\"message-username\">{sender.name}</div>\r\n\t\t\t\t<div className=\"message-text\">{text}</div>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Message;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Message from \"./Message\";\r\n\r\nclass MessageList extends Component {\r\n\tcomponentWillUpdate() {\r\n\t\tconst node = ReactDOM.findDOMNode(this);\r\n\t\tthis.shouldScrollToBottom =\r\n\t\t\tnode.scrollTop + node.clientHeight + 100 >= node.scrollHeight;\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tif (this.shouldScrollToBottom) {\r\n\t\t\tconst node = ReactDOM.findDOMNode(this);\r\n\t\t\tnode.scrollTop = node.scrollHeight;\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (!this.props.roomId) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"message-list\">\r\n\t\t\t\t\t<div className=\"join-room\">&larr; Join A Room !</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className=\"message-list\">\r\n\t\t\t\t{this.props.messages.map((message, i) => (\r\n\t\t\t\t\t<Message key={i} message={message} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default MessageList;\r\n","import React, { Component } from \"react\";\r\n\r\nclass sendMessageForm extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tmessage: \"\"\r\n\t\t};\r\n\t}\r\n\r\n\thandleChange = e => {\r\n\t\tthis.setState({\r\n\t\t\tmessage: e.target.value\r\n\t\t});\r\n\t};\r\n\r\n\thandleSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\tthis.props.sendMessage(this.state.message);\r\n\t\tthis.setState({\r\n\t\t\tmessage: \"\"\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<form className=\"send-message-form\" onSubmit={this.handleSubmit}>\r\n\t\t\t\t<input\r\n\t\t\t\t\tdisabled={this.props.disabled}\r\n\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tvalue={this.state.message}\r\n\t\t\t\t\tplaceholder=\"Type A Message And Hit Enter\"\r\n\t\t\t\t/>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default sendMessageForm;\r\n","import React, { Component } from \"react\";\r\n\r\nclass NewRoomForm extends Component {\r\n\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\troomName: \"\"\r\n\t\t}\r\n\t}\r\n\r\n\thandleChange = (e) => {\r\n\t\tthis.setState({roomName: e.target.value});\r\n\t}\r\n\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tthis.props.createRoom(this.state.roomName);\r\n\t\tthis.setState({roomName:''});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"new-room-form\">\r\n\t\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<input onChange={this.handleChange} value={this.state.roomName} type=\"text\" placeholder=\"New Room\" required />\r\n\t\t\t\t\t<button id=\"create-room-btn\" type=\"submit\">\r\n\t\t\t\t\t\t+\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default NewRoomForm;\r\n","import React, { Component } from \"react\";\r\nimport Chatkit from \"@pusher/chatkit\";\r\nimport RoomList from \"../components/RoomList\";\r\nimport MessageList from \"../components/MessageList\";\r\nimport SendMessageForm from \"../components/SendMessageForm\";\r\nimport NewRoomForm from \"../components/NewRoomForm\";\r\nimport \"./App.css\";\r\nimport { tokenUrl, instanceLocator } from \"./config\";\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tmessages: [],\r\n\t\t\tjoinableRooms: [],\r\n\t\t\tjoinedRooms: [],\r\n\t\t\troomId: null\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst chatManager = new Chatkit.ChatManager({\r\n\t\t\tinstanceLocator,\r\n\t\t\tuserId: \"johnDoe\",\r\n\t\t\ttokenProvider: new Chatkit.TokenProvider({ url: tokenUrl })\r\n\t\t});\r\n\t\tchatManager\r\n\t\t\t.connect()\r\n\t\t\t.then(currentUser => {\r\n\t\t\t\tthis.currentUser = currentUser;\r\n\t\t\t\tthis.getRooms();\r\n\t\t\t})\r\n\t\t\t.catch(error => console.log(\"failed to connect to service\", error));\r\n\t}\r\n\r\n\tgetRooms = () => {\r\n\t\tthis.currentUser\r\n\t\t\t.getJoinableRooms()\r\n\t\t\t.then(joinableRooms =>\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tjoinableRooms,\r\n\t\t\t\t\tjoinedRooms: this.currentUser.rooms\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.catch(error => console.log(\"Failed To Fetch Joined Rooms\", error));\r\n\t};\r\n\tsubscribeToRoom = roomId => {\r\n\t\tthis.setState({ messages: [] });\r\n\t\tthis.currentUser\r\n\t\t\t.subscribeToRoom({\r\n\t\t\t\troomId,\r\n\t\t\t\thooks: {\r\n\t\t\t\t\tonNewMessage: message => {\r\n\t\t\t\t\t\tthis.setState({ messages: [...this.state.messages, message] });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then(room => {\r\n\t\t\t\tthis.setState({ roomId: room.id });\r\n\t\t\t\tthis.getRooms();\r\n\t\t\t})\r\n\t\t\t.catch(error => console.log(\"Failed To Get Rooms\", error));\r\n\t};\r\n\tsendMessage = text => {\r\n\t\tthis.currentUser.sendMessage({\r\n\t\t\ttext,\r\n\t\t\troomId: this.state.roomId\r\n\t\t});\r\n\t};\r\n\r\n\tcreateRoom = name => {\r\n\t\tthis.currentUser\r\n\t\t\t.createRoom({\r\n\t\t\t\tname\r\n\t\t\t})\r\n\t\t\t.then(room => this.subscribeToRoom(room.id))\r\n\t\t\t.catch(error => console.log(\"Failed To Create New Room\", error));\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"app\">\r\n\t\t\t\t<RoomList\r\n\t\t\t\t\troomId={this.state.roomId}\r\n\t\t\t\t\trooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}\r\n\t\t\t\t\tsubscribeToRoom={this.subscribeToRoom}\r\n\t\t\t\t/>\r\n\t\t\t\t<MessageList\r\n\t\t\t\t\tmessages={this.state.messages}\r\n\t\t\t\t\troomId={this.state.roomId}\r\n\t\t\t\t/>\r\n\t\t\t\t<SendMessageForm\r\n\t\t\t\t\tsendMessage={this.sendMessage}\r\n\t\t\t\t\tdisabled={!this.state.roomId}\r\n\t\t\t\t/>\r\n\t\t\t\t<NewRoomForm createRoom={this.createRoom} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","const tokenUrl = \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/fa93b975-6eca-432b-9712-4f0f768aa653/token\";\r\nconst instanceLocator = \"v1:us1:fa93b975-6eca-432b-9712-4f0f768aa653\";\r\n\r\nexport {tokenUrl, instanceLocator}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App.jsx';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}